{"version":3,"sources":["serviceWorker.ts","api/todolists-api.ts","app/app-reducer.ts","utils/error-utils.ts","features/TodolistsList/todolists-reducer.ts","features/TodolistsList/tasks-reducer.ts","components/AddItemForm/AddItemForm.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Task/Task.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/TodolistsList.tsx","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx"],"names":["Boolean","window","location","hostname","match","TaskStatuses","TaskPriorities","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","todolistId","taskId","taskTitile","model","authAPI","data","initializeAppTC","createAsyncThunk","_","thunkAPI","a","resultCode","value","slice","createSlice","name","initialState","status","error","isInitialized","reducers","setAppErrorAC","state","action","payload","setAppStatusAC","setAppInitializedAC","extraReducers","builder","addCase","fulfilled","appReducer","reducer","actions","handleServerAppError","dispatch","messages","length","handleServerNetworkError","message","removeTodolistAC","index","findIndex","tl","splice","addTodolistAC","unshift","todolist","filter","entityStatus","changeTodolistTitleAC","changeTodolistFilterAC","changeTodolistEntityStatusAC","setTodolistsAC","todolists","map","todolistsReducer","fetchTasksTC","res","tasks","items","removeTaskTC","addTaskTC","task","item","updateTaskAC","t","Object","assign","forEach","todoListId","tasksReducer","updateTaskTC","domainModel","getState","find","apiModel","deadline","description","priority","startDate","then","catch","console","warn","AddItemForm","React","memo","addItem","disabled","log","useState","setTitle","setError","addItemHandler","trim","TextField","variant","onChange","e","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","EditableSpan","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","onClickHandler","useCallback","removeTask","onChangeHandler","newIsDoneValue","checked","changeTaskStatus","Completed","New","onTitleChangeHandler","newValue","changeTaskTitle","key","className","Checkbox","Delete","Todolist","demo","useDispatch","useEffect","thunk","addTask","changeTodolistTitle","onAllClickHandler","changeFilter","onActiveClickHandler","onCompletedClickHandler","tasksForTodolist","removeTodolist","style","paddingTop","Button","TodolistsList","useSelector","isLoggedIn","auth","changeStatus","newTitle","changeTodolistTitleTC","addTodolist","addTodolistTC","Grid","container","padding","spacing","allTodolistTasks","Paper","to","Alert","elevation","ErrorSnackbar","app","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","loginTC","logoutTC","setIsLoggedInAC","addMatcher","isAnyOf","authReducer","Login","formik","useFormik","validate","values","email","password","initialValues","rememberMe","onSubmit","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","errors","type","FormControlLabel","control","App","logoutHandler","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","store","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ca4a649f.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      process.env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import axios from 'axios'\r\n\r\nconst settings = {\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': 'b0ae91ea-dea0-4f4d-962d-06b66b5c2c2d'\r\n    }\r\n}\r\nconst instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    ...settings\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        const promise = instance.get<TodolistType[]>('todo-lists');\r\n        return promise;\r\n    },\r\n    createTodolist(title: string) {\r\n        const promise = instance.post<ResponseType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n        return promise;\r\n    },\r\n    deleteTodolist(id: string) {\r\n        const promise = instance.delete<ResponseType>(`todo-lists/${id}`);\r\n        return promise;\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        const promise = instance.put<ResponseType>(`todo-lists/${id}`, {title: title});\r\n        return promise;\r\n    },\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseType<{ item: TaskType}>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateTaskModelType) {\r\n        return instance.put<ResponseType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    }\r\n}\r\n\r\n\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        const promise = instance.post<ResponseType<{userId?: number}>>('auth/login', data);\r\n        return promise;\r\n    },\r\n    logout() {\r\n        const promise = instance.delete<ResponseType<{userId?: number}>>('auth/login');\r\n        return promise;\r\n    },\r\n    me() {\r\n       const promise =  instance.get<ResponseType<{id: number; email: string; login: string}>>('auth/me');\r\n       return promise\r\n    }\r\n}\r\n\r\n// types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type ResponseType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateTaskModelType = {\r\n    title: string\r\n    description: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}\r\n","import {Dispatch} from 'redux'\r\nimport {authAPI} from '../api/todolists-api'\r\nimport {setIsLoggedInAC} from '../features/Login/auth-reducer'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const initializeAppTC = createAsyncThunk('app/initializeApp',  async (_, thunkAPI)=>{\r\n const res = await authAPI.me()\r\n    if (res.data.resultCode === 0) {\r\n        return  {value: true}\r\n    }\r\n    return {value: false}\r\n})\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: null,\r\n    isInitialized: false\r\n}\r\n\r\nconst slice = createSlice({\r\n    name: 'app',\r\n    initialState,\r\n    reducers: {\r\n        setAppErrorAC:(state, action: PayloadAction<{error: string | null}>) => {\r\n            state.error = action.payload.error\r\n        },\r\n        setAppStatusAC: (state, action: PayloadAction<{status: RequestStatusType}>) => {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppInitializedAC: (state, action: PayloadAction<{value: boolean}>) => {\r\n            state.isInitialized = action.payload.value\r\n        }\r\n    },\r\n    extraReducers: builder => {\r\n        builder.addCase(initializeAppTC.fulfilled, (state)=>{\r\n            state.isInitialized = true\r\n        })\r\n    }\r\n})\r\n\r\nexport const appReducer = slice.reducer\r\nexport const {setAppInitializedAC, setAppStatusAC, setAppErrorAC} = slice.actions\r\n\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeeded' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string | null\r\n    isInitialized: boolean\r\n}\r\n\r\n\r\n\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppErrorAC>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatusAC>\r\n\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n    | ReturnType<typeof setAppInitializedAC>\r\n","import {ResponseType} from '../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {setAppErrorAC, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from \"../app/app-reducer\";\r\n\r\nexport const handleServerAppError = <D>(data: ResponseType<D>, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    if (data.messages.length) {\r\n        dispatch(setAppErrorAC({error: data.messages[0]}))\r\n    } else {\r\n        dispatch(setAppErrorAC({error: 'Some error occurred'}))\r\n    }\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n\r\nexport const handleServerNetworkError = (error: { message: string }, dispatch: Dispatch<SetAppErrorActionType | SetAppStatusActionType>) => {\r\n    dispatch(setAppErrorAC({error: error.message ? error.message : 'Some error occurred'}))\r\n    dispatch(setAppStatusAC({status: 'failed'}))\r\n}\r\n","import {todolistsAPI, TodolistType} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {RequestStatusType, SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: Array<TodolistDomainType> = []\r\n\r\nconst slice = createSlice({\r\n    name: 'todolist',\r\n    initialState,\r\n    reducers: {\r\n        removeTodolistAC: (state, action:PayloadAction<{id: string}>) => {\r\n            const index = state.findIndex(tl=>tl.id === action.payload.id)\r\n            if (index > -1) {\r\n                state.splice(index,1)\r\n            }\r\n        },\r\n        addTodolistAC: (state, action:PayloadAction<{todolist: TodolistType}>) => {\r\n            state.unshift({...action.payload.todolist, filter: 'all', entityStatus: 'idle'})\r\n        },\r\n        changeTodolistTitleAC: (state, action:PayloadAction<{id: string, title: string}>) => {\r\n            const index = state.findIndex(tl=>tl.id===action.payload.id)\r\n            if (index > -1) {\r\n                state[index].title=action.payload.title\r\n            }\r\n        },\r\n        changeTodolistFilterAC: (state, action:PayloadAction<{id: string, filter: FilterValuesType}>) => {\r\n            const index = state.findIndex(tl=>tl.id===action.payload.id)\r\n            if (index > -1) {\r\n                state[index].filter=action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC: (state, action:PayloadAction<{id: string, status: RequestStatusType}>) => {\r\n            const index = state.findIndex(tl=>tl.id===action.payload.id)\r\n            if (index > -1) {\r\n                state[index].entityStatus=action.payload.status\r\n            }\r\n        },\r\n        setTodolistsAC: (state, action:PayloadAction<{todolists: Array<TodolistType>}>) => {\r\n            return action.payload.todolists.map(tl => ({...tl, filter: 'all', entityStatus: 'idle'}))\r\n        },\r\n    }\r\n})\r\n\r\nexport const {removeTodolistAC, setTodolistsAC, changeTodolistFilterAC, changeTodolistTitleAC, addTodolistAC, changeTodolistEntityStatusAC} = slice.actions\r\nexport const todolistsReducer = slice.reducer\r\n\r\nexport const fetchTodolistsTC = () => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.getTodolists()\r\n            .then((res) => {\r\n                dispatch(setTodolistsAC({todolists: res.data}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n            .catch(error => {\r\n                handleServerNetworkError(error, dispatch);\r\n            })\r\n    }\r\n}\r\nexport const removeTodolistTC = (todolistId: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        dispatch(changeTodolistEntityStatusAC({id: todolistId, status: 'loading'}))\r\n        todolistsAPI.deleteTodolist(todolistId)\r\n            .then((res) => {\r\n                dispatch(removeTodolistAC({id: todolistId}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const addTodolistTC = (title: string) => {\r\n    return (dispatch: ThunkDispatch) => {\r\n        dispatch(setAppStatusAC({status: 'loading'}))\r\n        todolistsAPI.createTodolist(title)\r\n            .then((res) => {\r\n                dispatch(addTodolistAC({todolist: res.data.data.item}))\r\n                dispatch(setAppStatusAC({status: 'succeeded'}))\r\n            })\r\n    }\r\n}\r\nexport const changeTodolistTitleTC = (id: string, title: string) => {\r\n    return (dispatch: Dispatch<ActionsType>) => {\r\n        todolistsAPI.updateTodolist(id, title)\r\n            .then((res) => {\r\n                dispatch(changeTodolistTitleAC({id, title}))\r\n            })\r\n    }\r\n}\r\n\r\n// types\r\nexport type AddTodolistActionType = ReturnType<typeof addTodolistAC>;\r\nexport type RemoveTodolistActionType = ReturnType<typeof removeTodolistAC>;\r\nexport type SetTodolistsActionType = ReturnType<typeof setTodolistsAC>;\r\ntype ActionsType =\r\n    | RemoveTodolistActionType\r\n    | AddTodolistActionType\r\n    | ReturnType<typeof changeTodolistTitleAC>\r\n    | ReturnType<typeof changeTodolistFilterAC>\r\n    | SetTodolistsActionType\r\n    | ReturnType<typeof changeTodolistEntityStatusAC>\r\nexport type FilterValuesType = 'all' | 'active' | 'completed';\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatusType\r\n}\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import {\r\n  addTodolistAC,\r\n  AddTodolistActionType, removeTodolistAC,\r\n  RemoveTodolistActionType, setTodolistsAC,\r\n  SetTodolistsActionType\r\n} from './todolists-reducer'\r\nimport {\r\n  TaskPriorities,\r\n  TaskStatuses,\r\n  TaskType,\r\n  todolistsAPI,\r\n  TodolistType,\r\n  UpdateTaskModelType\r\n} from '../../api/todolists-api'\r\nimport {Dispatch} from 'redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {SetAppErrorActionType, setAppStatusAC, SetAppStatusActionType} from '../../app/app-reducer'\r\nimport {handleServerAppError, handleServerNetworkError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const fetchTasksTC = createAsyncThunk('tasks/fetchTasks', async (todolistId: string, thunkAPI)=>{\r\n  thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n  const res = await todolistsAPI.getTasks(todolistId)\r\n  const tasks = res.data.items\r\n  thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n  return {tasks, todolistId}\r\n})\r\n\r\n\r\nexport const removeTaskTC = createAsyncThunk('tasks/removeTask', async ({taskId, todolistId}:{taskId: string, todolistId: string}, thunkAPI)=>{\r\n  await todolistsAPI.deleteTask(todolistId, taskId)\r\n  return {todolistId, taskId}\r\n})\r\n\r\nexport const addTaskTC = createAsyncThunk('tasks/addTask', async ({title, todolistId}:{title: string, todolistId: string}, thunkAPI)=> {\r\n  thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n  try {\r\n    const res = await todolistsAPI.createTask(todolistId, title)\r\n    if (res.data.resultCode === 0) {\r\n      const task = res.data.data.item\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      return {task}\r\n    } else {\r\n      handleServerAppError(res.data, thunkAPI.dispatch);\r\n    }\r\n  } catch (error) {\r\n    // @ts-ignore\r\n    handleServerNetworkError(error, thunkAPI.dispatch)\r\n  }\r\n})\r\n\r\nconst initialState = {} as TasksStateType\r\n\r\nconst slice = createSlice({\r\n  name: 'tasks',\r\n  initialState,\r\n  reducers: {\r\n    updateTaskAC: (state, action: PayloadAction<{ taskId: string, model: UpdateDomainTaskModelType, todolistId: string }>) => {\r\n      const index = state[action.payload.todolistId].findIndex(t => t.id === action.payload.taskId)\r\n      if (index > -1) {\r\n        Object.assign(state[action.payload.todolistId][index], action.payload.model)\r\n      }\r\n    },\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addCase(addTodolistAC, (state, action: PayloadAction<{ todolist: TodolistType }>) => {\r\n      state[action.payload.todolist.id] = []\r\n    })\r\n    builder.addCase(removeTodolistAC, (state, action: PayloadAction<{ id: string }>) => {\r\n      delete state[action.payload.id]\r\n    })\r\n    builder.addCase(setTodolistsAC, (state, action: PayloadAction<{ todolists: Array<TodolistType> }>) => {\r\n      action.payload.todolists.forEach(tl => (state[tl.id] = []))\r\n    })\r\n    builder.addCase(fetchTasksTC.fulfilled, (state, action)=>{\r\n      if (state[action.payload.todolistId]) {\r\n        Object.assign(state[action.payload.todolistId], action.payload.tasks)\r\n      } else {\r\n        state[action.payload.todolistId] = action.payload.tasks\r\n      }\r\n    })\r\n    builder.addCase(removeTaskTC.fulfilled, (state, action)=> {\r\n      const index = state[action.payload.todolistId].findIndex(t=>t.id===action.payload.taskId)\r\n      if (index > -1) {\r\n        state[action.payload.todolistId].splice(index,1)\r\n      }\r\n    })\r\n    builder.addCase(addTaskTC.fulfilled, (state, action)=>{\r\n      if (action.payload) {\r\n        state[action.payload.task.todoListId].unshift(action.payload.task)\r\n      }\r\n    })\r\n  }\r\n})\r\n\r\n\r\n\r\nexport const tasksReducer = slice.reducer\r\nexport const {updateTaskAC} = slice.actions\r\n\r\n\r\nexport const updateTaskTC = (taskId: string, domainModel: UpdateDomainTaskModelType, todolistId: string) =>\r\n  (dispatch: ThunkDispatch, getState: () => AppRootStateType) => {\r\n    const state = getState()\r\n    const task = state.tasks[todolistId].find(t => t.id === taskId)\r\n    if (!task) {\r\n      console.warn('task not found in the state')\r\n      return\r\n    }\r\n\r\n    const apiModel: UpdateTaskModelType = {\r\n      deadline: task.deadline,\r\n      description: task.description,\r\n      priority: task.priority,\r\n      startDate: task.startDate,\r\n      title: task.title,\r\n      status: task.status,\r\n      ...domainModel\r\n    }\r\n\r\n    todolistsAPI.updateTask(todolistId, taskId, apiModel)\r\n      .then(res => {\r\n        if (res.data.resultCode === 0) {\r\n          const action = updateTaskAC({taskId, model: domainModel, todolistId})\r\n          dispatch(action)\r\n        } else {\r\n          handleServerAppError(res.data, dispatch);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        handleServerNetworkError(error, dispatch);\r\n      })\r\n  }\r\n\r\n// types\r\nexport type UpdateDomainTaskModelType = {\r\n  title?: string\r\n  description?: string\r\n  status?: TaskStatuses\r\n  priority?: TaskPriorities\r\n  startDate?: string\r\n  deadline?: string\r\n}\r\nexport type TasksStateType = {\r\n  [key: string]: Array<TaskType>\r\n}\r\ntype ActionsType =\r\n  | ReturnType<typeof updateTaskAC>\r\n  | AddTodolistActionType\r\n  | RemoveTodolistActionType\r\n  | SetTodolistsActionType\r\ntype ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype AddItemFormPropsType = {\r\n    addItem: (title: string) => void\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm = React.memo(function({addItem, disabled = false}: AddItemFormPropsType) {\r\n    console.log(\"AddItemForm called\")\r\n\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title);\r\n            setTitle(\"\");\r\n        } else {\r\n            setError(\"Title is required\");\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        }\r\n        if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <TextField variant=\"outlined\"\r\n                   disabled={disabled}\r\n                   error={!!error}\r\n                   value={title}\r\n                   onChange={onChangeHandler}\r\n                   onKeyPress={onKeyPressHandler}\r\n                   label=\"Title\"\r\n                   helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox />\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    console.log(\"EditableSpan called\");\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [title, setTitle] = useState(props.value);\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setTitle(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(title);\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ?    <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode}>{props.value}</span>\r\n});\r\n","import React, {ChangeEvent, useCallback} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from '../../../../components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskStatuses, TaskType} from '../../../../api/todolists-api'\r\n\r\ntype TaskPropsType = {\r\n    task: TaskType\r\n    todolistId: string\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n}\r\nexport const Task = React.memo((props: TaskPropsType) => {\r\n    const onClickHandler = useCallback(() => props.removeTask(props.task.id, props.todolistId), [props.task.id, props.todolistId]);\r\n\r\n    const onChangeHandler = useCallback((e: ChangeEvent<HTMLInputElement>) => {\r\n        let newIsDoneValue = e.currentTarget.checked\r\n        props.changeTaskStatus(props.task.id, newIsDoneValue ? TaskStatuses.Completed : TaskStatuses.New, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    const onTitleChangeHandler = useCallback((newValue: string) => {\r\n        props.changeTaskTitle(props.task.id, newValue, props.todolistId)\r\n    }, [props.task.id, props.todolistId]);\r\n\r\n    return <div key={props.task.id} className={props.task.status === TaskStatuses.Completed ? 'is-done' : ''}>\r\n        <Checkbox\r\n            checked={props.task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeHandler}\r\n        />\r\n\r\n        <EditableSpan value={props.task.title} onChange={onTitleChangeHandler}/>\r\n        <IconButton onClick={onClickHandler}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {AddItemForm} from '../../../components/AddItemForm/AddItemForm'\r\nimport {EditableSpan} from '../../../components/EditableSpan/EditableSpan'\r\nimport {Button, IconButton} from '@material-ui/core'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {Task} from './Task/Task'\r\nimport {TaskStatuses, TaskType} from '../../../api/todolists-api'\r\nimport {FilterValuesType, TodolistDomainType} from '../todolists-reducer'\r\nimport {useDispatch} from 'react-redux'\r\nimport {fetchTasksTC} from '../tasks-reducer'\r\n\r\ntype PropsType = {\r\n    todolist: TodolistDomainType\r\n    tasks: Array<TaskType>\r\n    changeFilter: (value: FilterValuesType, todolistId: string) => void\r\n    addTask: (title: string, todolistId: string) => void\r\n    changeTaskStatus: (id: string, status: TaskStatuses, todolistId: string) => void\r\n    changeTaskTitle: (taskId: string, newTitle: string, todolistId: string) => void\r\n    removeTask: (taskId: string, todolistId: string) => void\r\n    removeTodolist: (id: string) => void\r\n    changeTodolistTitle: (id: string, newTitle: string) => void\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist = React.memo(function ({demo = false, ...props}: PropsType) {\r\n    console.log('Todolist called')\r\n\r\n    const dispatch = useDispatch()\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        const thunk = fetchTasksTC(props.todolist.id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback((title: string) => {\r\n        props.addTask(title, props.todolist.id)\r\n    }, [props.addTask, props.todolist.id])\r\n\r\n    const removeTodolist = () => {\r\n        props.removeTodolist(props.todolist.id)\r\n    }\r\n    const changeTodolistTitle = useCallback((title: string) => {\r\n        props.changeTodolistTitle(props.todolist.id, title)\r\n    }, [props.todolist.id, props.changeTodolistTitle])\r\n\r\n    const onAllClickHandler = useCallback(() => props.changeFilter('all', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onActiveClickHandler = useCallback(() => props.changeFilter('active', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n    const onCompletedClickHandler = useCallback(() => props.changeFilter('completed', props.todolist.id), [props.todolist.id, props.changeFilter])\r\n\r\n\r\n    let tasksForTodolist = props.tasks\r\n\r\n    if (props.todolist.filter === 'active') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (props.todolist.filter === 'completed') {\r\n        tasksForTodolist = props.tasks.filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n\r\n    return <div>\r\n        <h3><EditableSpan value={props.todolist.title} onChange={changeTodolistTitle}/>\r\n            <IconButton onClick={removeTodolist} disabled={props.todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n        <AddItemForm addItem={addTask} disabled={props.todolist.entityStatus === 'loading'}/>\r\n        <div>\r\n            {\r\n                tasksForTodolist.map(t => <Task key={t.id} task={t} todolistId={props.todolist.id}\r\n                                                removeTask={props.removeTask}\r\n                                                changeTaskTitle={props.changeTaskTitle}\r\n                                                changeTaskStatus={props.changeTaskStatus}\r\n                />)\r\n            }\r\n        </div>\r\n        <div style={{paddingTop: '10px'}}>\r\n            <Button variant={props.todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={onAllClickHandler}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={onActiveClickHandler}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={props.todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={onCompletedClickHandler}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {\r\n    addTodolistTC,\r\n    changeTodolistFilterAC,\r\n    changeTodolistTitleTC,\r\n    fetchTodolistsTC,\r\n    FilterValuesType,\r\n    removeTodolistTC,\r\n    TodolistDomainType\r\n} from './todolists-reducer'\r\nimport {addTaskTC, removeTaskTC, TasksStateType, updateTaskTC} from './tasks-reducer'\r\nimport {TaskStatuses} from '../../api/todolists-api'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from '../../components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist/Todolist'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: React.FC<PropsType> = ({demo = false}) => {\r\n    const todolists = useSelector<AppRootStateType, Array<TodolistDomainType>>(state => state.todolists)\r\n    const tasks = useSelector<AppRootStateType, TasksStateType>(state => state.tasks)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        const thunk = fetchTodolistsTC()\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const removeTask = useCallback(function (id: string, todolistId: string) {\r\n        const thunk = removeTaskTC({taskId: id, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTask = useCallback(function (title: string, todolistId: string) {\r\n        const thunk = addTaskTC({title, todolistId})\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeStatus = useCallback(function (id: string, status: TaskStatuses, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {status}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTaskTitle = useCallback(function (id: string, newTitle: string, todolistId: string) {\r\n        const thunk = updateTaskTC(id, {title: newTitle}, todolistId)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeFilter = useCallback(function (value: FilterValuesType, todolistId: string) {\r\n        const action = changeTodolistFilterAC({id: todolistId, filter: value})\r\n        dispatch(action)\r\n    }, [])\r\n\r\n    const removeTodolist = useCallback(function (id: string) {\r\n        const thunk = removeTodolistTC(id)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const changeTodolistTitle = useCallback(function (id: string, title: string) {\r\n        const thunk = changeTodolistTitleTC(id, title)\r\n        dispatch(thunk)\r\n    }, [])\r\n\r\n    const addTodolist = useCallback((title: string) => {\r\n        const thunk = addTodolistTC(title)\r\n        dispatch(thunk)\r\n    }, [dispatch])\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"} />\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{padding: '20px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3}>\r\n            {\r\n                todolists.map(tl => {\r\n                    let allTodolistTasks = tasks[tl.id]\r\n\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                tasks={allTodolistTasks}\r\n                                removeTask={removeTask}\r\n                                changeFilter={changeFilter}\r\n                                addTask={addTask}\r\n                                changeTaskStatus={changeStatus}\r\n                                removeTodolist={removeTodolist}\r\n                                changeTaskTitle={changeTaskTitle}\r\n                                changeTodolistTitle={changeTodolistTitle}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport {setAppErrorAC} from '../../app/app-reducer'\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    //const [open, setOpen] = React.useState(true)\r\n    const error = useSelector<AppRootStateType, string | null>(state => state.app.error);\r\n    const dispatch = useDispatch()\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        dispatch(setAppErrorAC({error: null}));\r\n    }\r\n\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {initializeAppTC, setAppStatusAC} from '../../app/app-reducer'\r\nimport {authAPI, LoginParamsType} from '../../api/todolists-api'\r\nimport {handleServerAppError} from '../../utils/error-utils'\r\nimport {createAsyncThunk, createSlice, isAnyOf, PayloadAction} from \"@reduxjs/toolkit\";\r\n\r\nconst initialState: InitialStateType = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const loginTC = createAsyncThunk('auth/login', async (data: LoginParamsType, thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n  try {\r\n    const res = await authAPI.login(data)\r\n    if (res.data.resultCode === 0) {\r\n      thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n      return {value: true}\r\n    } else {\r\n      handleServerAppError(res.data, thunkAPI.dispatch)\r\n      return {value: false}\r\n    }\r\n  } catch (error) {\r\n    // @ts-ignore\r\n    handleServerAppError(error, thunkAPI.dispatch)\r\n    return {value: false}\r\n  }\r\n})\r\n\r\nexport const logoutTC = createAsyncThunk('auth/logout', async (_,thunkAPI) => {\r\n  thunkAPI.dispatch(setAppStatusAC({status: 'loading'}))\r\n  try {\r\n    const res = await authAPI.logout()\r\n    if (res.data.resultCode === 0) {\r\n                thunkAPI.dispatch(setAppStatusAC({status: 'succeeded'}))\r\n                return {value: false}\r\n            } else {\r\n                handleServerAppError(res.data, thunkAPI.dispatch)\r\n                return {value: true}\r\n            }\r\n  } catch (error) {\r\n    // @ts-ignore\r\n    handleServerAppError(error, thunkAPI.dispatch)\r\n    return {value: true}\r\n  }\r\n})\r\n\r\nconst slice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    setIsLoggedInAC (state, action: PayloadAction<{value: boolean}>) {\r\n      state.isLoggedIn = action.payload.value\r\n    }\r\n  },\r\n  extraReducers: builder => {\r\n    builder.addMatcher(isAnyOf(loginTC.fulfilled, logoutTC.fulfilled, initializeAppTC.fulfilled), (state, action) => {\r\n      state.isLoggedIn = action.payload.value\r\n    })\r\n  }\r\n})\r\n\r\nexport const authReducer = slice.reducer\r\nexport const {setIsLoggedInAC} = slice.actions\r\n\r\n// type ActionsType = ReturnType<typeof setIsLoggedInAC>\r\ntype InitialStateType = {\r\n    isLoggedIn: boolean\r\n}\r\n\r\n// type ThunkDispatch = Dispatch<ActionsType | SetAppStatusActionType | SetAppErrorActionType>\r\n","import React from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {useFormik} from 'formik'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {loginTC} from './auth-reducer'\r\nimport {AppRootStateType} from '../../app/store'\r\nimport { Redirect } from 'react-router-dom'\r\n\r\nexport const Login = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn);\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            if (!values.email) {\r\n                return {\r\n                    email: 'Email is required'\r\n                }\r\n            }\r\n            if (!values.password) {\r\n                return {\r\n                    password: 'Password is required'\r\n                }\r\n            }\r\n\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n        onSubmit: values => {\r\n            dispatch(loginTC(values));\r\n        },\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"} />\r\n    }\r\n\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.errors.email ? <div>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.errors.password ? <div>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {useCallback, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from '../features/TodolistsList/TodolistsList'\r\nimport {ErrorSnackbar} from '../components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {AppRootStateType} from './store'\r\nimport {initializeAppTC, RequestStatusType} from './app-reducer'\r\nimport {Route} from 'react-router-dom'\r\nimport {Login} from '../features/Login/Login'\r\nimport {logoutTC} from '../features/Login/auth-reducer'\r\n\r\ntype PropsType = {\r\n    demo?: boolean\r\n}\r\n\r\nfunction App({demo = false}: PropsType) {\r\n    const status = useSelector<AppRootStateType, RequestStatusType>((state) => state.app.status)\r\n    const isInitialized = useSelector<AppRootStateType, boolean>((state) => state.app.isInitialized)\r\n    const isLoggedIn = useSelector<AppRootStateType, boolean>(state => state.auth.isLoggedIn)\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => {\r\n        dispatch(initializeAppTC())\r\n    }, [])\r\n\r\n    const logoutHandler = useCallback(() => {\r\n        dispatch(logoutTC())\r\n    }, [])\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n      <div className=\"App\">\r\n          <ErrorSnackbar/>\r\n          <AppBar position=\"static\">\r\n              <Toolbar>\r\n                  <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                      <Menu/>\r\n                  </IconButton>\r\n                  <Typography variant=\"h6\">\r\n                      News\r\n                  </Typography>\r\n                  {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n              </Toolbar>\r\n              {status === 'loading' && <LinearProgress/>}\r\n          </AppBar>\r\n          <Container fixed>\r\n              <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n              <Route path={'/login'} render={() => <Login/>}/>\r\n          </Container>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default App\r\n","import {tasksReducer} from '../features/TodolistsList/tasks-reducer';\r\nimport {todolistsReducer} from '../features/TodolistsList/todolists-reducer';\r\nimport {appReducer} from './app-reducer'\r\nimport {authReducer} from '../features/Login/auth-reducer'\r\nimport {combineReducers, configureStore} from \"@reduxjs/toolkit\";\r\n\r\nexport const rootReducer = combineReducers({\r\n  tasks: tasksReducer,\r\n  todolists: todolistsReducer,\r\n  app: appReducer,\r\n  auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n  reducer: rootReducer,\r\n})\r\n\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import * as serviceWorker from './serviceWorker';\r\nimport App from './app/App';\r\nimport {Provider} from 'react-redux';\r\nimport {BrowserRouter} from \"react-router-dom\";\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css'\r\nimport {store} from \"./app/store\";\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <BrowserRouter>\r\n      <App/>\r\n    </BrowserRouter>\r\n  </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}